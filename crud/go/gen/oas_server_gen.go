// Code generated by ogen, DO NOT EDIT.

package gen

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateRecord implements CreateRecord operation.
	//
	// Creates record.
	//
	// POST /entity/{name}
	CreateRecord(ctx context.Context, req *Record, params CreateRecordParams) (*IdentifiedRecord, error)
	// DeleteRecordById implements DeleteRecordById operation.
	//
	// Deletes record.
	//
	// DELETE /entity/{name}/{id}
	DeleteRecordById(ctx context.Context, params DeleteRecordByIdParams) error
	// GetEntitiesMappings implements GetEntitiesMappings operation.
	//
	// Returns a mappings of loaded entities.
	//
	// GET /entity_mappings
	GetEntitiesMappings(ctx context.Context) ([]EntityMapping, error)
	// GetRecordById implements GetRecordById operation.
	//
	// Retrieves one record by identifier.
	//
	// GET /entity/{name}/{id}
	GetRecordById(ctx context.Context, params GetRecordByIdParams) (*IdentifiedRecord, error)
	// GetRecords implements GetRecords operation.
	//
	// Retrieves records with pagination.
	//
	// GET /entity/{name}
	GetRecords(ctx context.Context, params GetRecordsParams) (*RecordsResponse, error)
	// UpdateRecordById implements UpdateRecordById operation.
	//
	// Updates existing record.
	//
	// PUT /entity/{name}/{id}
	UpdateRecordById(ctx context.Context, req *Record, params UpdateRecordByIdParams) (*IdentifiedRecord, error)
	// NewError creates *ErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
