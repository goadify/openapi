// Code generated by ogen, DO NOT EDIT.

package gen

import (
	"fmt"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Entity mapping.
// Ref: #/components/schemas/EntityMapping
type EntityMapping struct {
	Name   string                    `json:"name"`
	Fields []EntityMappingFieldsItem `json:"fields"`
}

// GetName returns the value of Name.
func (s *EntityMapping) GetName() string {
	return s.Name
}

// GetFields returns the value of Fields.
func (s *EntityMapping) GetFields() []EntityMappingFieldsItem {
	return s.Fields
}

// SetName sets the value of Name.
func (s *EntityMapping) SetName(val string) {
	s.Name = val
}

// SetFields sets the value of Fields.
func (s *EntityMapping) SetFields(val []EntityMappingFieldsItem) {
	s.Fields = val
}

type EntityMappingFieldsItem struct {
	Name     string                          `json:"name"`
	Datatype EntityMappingFieldsItemDatatype `json:"datatype"`
}

// GetName returns the value of Name.
func (s *EntityMappingFieldsItem) GetName() string {
	return s.Name
}

// GetDatatype returns the value of Datatype.
func (s *EntityMappingFieldsItem) GetDatatype() EntityMappingFieldsItemDatatype {
	return s.Datatype
}

// SetName sets the value of Name.
func (s *EntityMappingFieldsItem) SetName(val string) {
	s.Name = val
}

// SetDatatype sets the value of Datatype.
func (s *EntityMappingFieldsItem) SetDatatype(val EntityMappingFieldsItemDatatype) {
	s.Datatype = val
}

type EntityMappingFieldsItemDatatype string

const (
	EntityMappingFieldsItemDatatypeString  EntityMappingFieldsItemDatatype = "string"
	EntityMappingFieldsItemDatatypeInteger EntityMappingFieldsItemDatatype = "integer"
	EntityMappingFieldsItemDatatypeFloat   EntityMappingFieldsItemDatatype = "float"
)

// MarshalText implements encoding.TextMarshaler.
func (s EntityMappingFieldsItemDatatype) MarshalText() ([]byte, error) {
	switch s {
	case EntityMappingFieldsItemDatatypeString:
		return []byte(s), nil
	case EntityMappingFieldsItemDatatypeInteger:
		return []byte(s), nil
	case EntityMappingFieldsItemDatatypeFloat:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EntityMappingFieldsItemDatatype) UnmarshalText(data []byte) error {
	switch EntityMappingFieldsItemDatatype(data) {
	case EntityMappingFieldsItemDatatypeString:
		*s = EntityMappingFieldsItemDatatypeString
		return nil
	case EntityMappingFieldsItemDatatypeInteger:
		*s = EntityMappingFieldsItemDatatypeInteger
		return nil
	case EntityMappingFieldsItemDatatypeFloat:
		*s = EntityMappingFieldsItemDatatypeFloat
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Error schema.
// Ref: #/components/schemas/Error
type Error struct {
	Code           int       `json:"code"`
	Message        string    `json:"message"`
	DisplayMessage OptString `json:"display_message"`
}

// GetCode returns the value of Code.
func (s *Error) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// GetDisplayMessage returns the value of DisplayMessage.
func (s *Error) GetDisplayMessage() OptString {
	return s.DisplayMessage
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// SetDisplayMessage sets the value of DisplayMessage.
func (s *Error) SetDisplayMessage(val OptString) {
	s.DisplayMessage = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

// Record object with identifier.
// Ref: #/components/schemas/IdentifiedRecord
type IdentifiedRecord struct {
	ID   string `json:"id"`
	Data jx.Raw `json:"data"`
}

// GetID returns the value of ID.
func (s *IdentifiedRecord) GetID() string {
	return s.ID
}

// GetData returns the value of Data.
func (s *IdentifiedRecord) GetData() jx.Raw {
	return s.Data
}

// SetID sets the value of ID.
func (s *IdentifiedRecord) SetID(val string) {
	s.ID = val
}

// SetData sets the value of Data.
func (s *IdentifiedRecord) SetData(val jx.Raw) {
	s.Data = val
}

// Ref: #/components/responses/NoContent
type NoContent struct{}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Record object.
// Ref: #/components/schemas/Record
type Record struct {
	Data jx.Raw `json:"data"`
}

// GetData returns the value of Data.
func (s *Record) GetData() jx.Raw {
	return s.Data
}

// SetData sets the value of Data.
func (s *Record) SetData(val jx.Raw) {
	s.Data = val
}

type RecordsResponse struct {
	TotalCount int64              `json:"totalCount"`
	Items      []IdentifiedRecord `json:"items"`
}

// GetTotalCount returns the value of TotalCount.
func (s *RecordsResponse) GetTotalCount() int64 {
	return s.TotalCount
}

// GetItems returns the value of Items.
func (s *RecordsResponse) GetItems() []IdentifiedRecord {
	return s.Items
}

// SetTotalCount sets the value of TotalCount.
func (s *RecordsResponse) SetTotalCount(val int64) {
	s.TotalCount = val
}

// SetItems sets the value of Items.
func (s *RecordsResponse) SetItems(val []IdentifiedRecord) {
	s.Items = val
}
