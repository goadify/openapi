/* tslint:disable */
/* eslint-disable */
/**
 * CRUD module API
 * CRUD module API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * Entity mapping
 * @export
 * @interface EntityMapping
 */
export interface EntityMapping {
    /**
     * 
     * @type {string}
     * @memberof EntityMapping
     */
    'name': string;
    /**
     * 
     * @type {Array<EntityMappingFieldsInner>}
     * @memberof EntityMapping
     */
    'fields': Array<EntityMappingFieldsInner>;
}
/**
 * 
 * @export
 * @interface EntityMappingFieldsInner
 */
export interface EntityMappingFieldsInner {
    /**
     * 
     * @type {string}
     * @memberof EntityMappingFieldsInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof EntityMappingFieldsInner
     */
    'datatype': EntityMappingFieldsInnerDatatypeEnum;
}

export const EntityMappingFieldsInnerDatatypeEnum = {
    String: 'string',
    Integer: 'integer',
    Float: 'float'
} as const;

export type EntityMappingFieldsInnerDatatypeEnum = typeof EntityMappingFieldsInnerDatatypeEnum[keyof typeof EntityMappingFieldsInnerDatatypeEnum];

/**
 * 
 * @export
 * @interface GetRecords200Response
 */
export interface GetRecords200Response {
    /**
     * 
     * @type {number}
     * @memberof GetRecords200Response
     */
    'totalCount': number;
    /**
     * 
     * @type {Array<IdentifiedRecord>}
     * @memberof GetRecords200Response
     */
    'items': Array<IdentifiedRecord>;
}
/**
 * Record object with identifier
 * @export
 * @interface IdentifiedRecord
 */
export interface IdentifiedRecord {
    /**
     * 
     * @type {string}
     * @memberof IdentifiedRecord
     */
    'id': string;
    /**
     * 
     * @type {any}
     * @memberof IdentifiedRecord
     */
    'data': any;
}
/**
 * Error schema
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {number}
     * @memberof ModelError
     */
    'code': number;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'display_message'?: string;
}
/**
 * Record object
 * @export
 * @interface Record
 */
export interface Record {
    /**
     * 
     * @type {any}
     * @memberof Record
     */
    'data': any;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates record
         * @param {string} name Entity name
         * @param {Record} record 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRecord: async (name: string, record: Record, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('createRecord', 'name', name)
            // verify required parameter 'record' is not null or undefined
            assertParamExists('createRecord', 'record', record)
            const localVarPath = `/entity/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(record, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes record
         * @param {string} name Entity name
         * @param {string} id Record id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecordById: async (name: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('deleteRecordById', 'name', name)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteRecordById', 'id', id)
            const localVarPath = `/entity/{name}/{id}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a mappings of loaded entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesMappings: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/entity_mappings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves one record by identifier
         * @param {string} name Entity name
         * @param {string} id Record id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecordById: async (name: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getRecordById', 'name', name)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRecordById', 'id', id)
            const localVarPath = `/entity/{name}/{id}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves records with pagination
         * @param {string} name Entity name
         * @param {number} [page] Selected page
         * @param {number} [perPage] Items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecords: async (name: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getRecords', 'name', name)
            const localVarPath = `/entity/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per-page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates existing record
         * @param {string} name Entity name
         * @param {string} id Record id
         * @param {Record} record 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRecordById: async (name: string, id: string, record: Record, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('updateRecordById', 'name', name)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateRecordById', 'id', id)
            // verify required parameter 'record' is not null or undefined
            assertParamExists('updateRecordById', 'record', record)
            const localVarPath = `/entity/{name}/{id}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(record, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates record
         * @param {string} name Entity name
         * @param {Record} record 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRecord(name: string, record: Record, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentifiedRecord>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRecord(name, record, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes record
         * @param {string} name Entity name
         * @param {string} id Record id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRecordById(name: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRecordById(name, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a mappings of loaded entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntitiesMappings(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EntityMapping>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntitiesMappings(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves one record by identifier
         * @param {string} name Entity name
         * @param {string} id Record id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecordById(name: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentifiedRecord>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecordById(name, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves records with pagination
         * @param {string} name Entity name
         * @param {number} [page] Selected page
         * @param {number} [perPage] Items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecords(name: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRecords200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecords(name, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates existing record
         * @param {string} name Entity name
         * @param {string} id Record id
         * @param {Record} record 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRecordById(name: string, id: string, record: Record, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentifiedRecord>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRecordById(name, id, record, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Creates record
         * @param {string} name Entity name
         * @param {Record} record 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRecord(name: string, record: Record, options?: any): AxiosPromise<IdentifiedRecord> {
            return localVarFp.createRecord(name, record, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes record
         * @param {string} name Entity name
         * @param {string} id Record id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecordById(name: string, id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteRecordById(name, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a mappings of loaded entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesMappings(options?: any): AxiosPromise<Array<EntityMapping>> {
            return localVarFp.getEntitiesMappings(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves one record by identifier
         * @param {string} name Entity name
         * @param {string} id Record id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecordById(name: string, id: string, options?: any): AxiosPromise<IdentifiedRecord> {
            return localVarFp.getRecordById(name, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves records with pagination
         * @param {string} name Entity name
         * @param {number} [page] Selected page
         * @param {number} [perPage] Items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecords(name: string, page?: number, perPage?: number, options?: any): AxiosPromise<GetRecords200Response> {
            return localVarFp.getRecords(name, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates existing record
         * @param {string} name Entity name
         * @param {string} id Record id
         * @param {Record} record 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRecordById(name: string, id: string, record: Record, options?: any): AxiosPromise<IdentifiedRecord> {
            return localVarFp.updateRecordById(name, id, record, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Creates record
     * @param {string} name Entity name
     * @param {Record} record 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createRecord(name: string, record: Record, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createRecord(name, record, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes record
     * @param {string} name Entity name
     * @param {string} id Record id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteRecordById(name: string, id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteRecordById(name, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a mappings of loaded entities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEntitiesMappings(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getEntitiesMappings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves one record by identifier
     * @param {string} name Entity name
     * @param {string} id Record id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRecordById(name: string, id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRecordById(name, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves records with pagination
     * @param {string} name Entity name
     * @param {number} [page] Selected page
     * @param {number} [perPage] Items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRecords(name: string, page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRecords(name, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates existing record
     * @param {string} name Entity name
     * @param {string} id Record id
     * @param {Record} record 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateRecordById(name: string, id: string, record: Record, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateRecordById(name, id, record, options).then((request) => request(this.axios, this.basePath));
    }
}


