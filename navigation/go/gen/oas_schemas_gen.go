// Code generated by ogen, DO NOT EDIT.

package gen

import (
	"fmt"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Error schema.
// Ref: #/components/schemas/Error
type Error struct {
	Code           int       `json:"code"`
	Message        string    `json:"message"`
	DisplayMessage OptString `json:"display_message"`
}

// GetCode returns the value of Code.
func (s *Error) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// GetDisplayMessage returns the value of DisplayMessage.
func (s *Error) GetDisplayMessage() OptString {
	return s.DisplayMessage
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// SetDisplayMessage sets the value of DisplayMessage.
func (s *Error) SetDisplayMessage(val OptString) {
	s.DisplayMessage = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

// Ref: #/components/schemas/Group
type Group struct {
	Title string `json:"title"`
	Links []Link `json:"links"`
}

// GetTitle returns the value of Title.
func (s *Group) GetTitle() string {
	return s.Title
}

// GetLinks returns the value of Links.
func (s *Group) GetLinks() []Link {
	return s.Links
}

// SetTitle sets the value of Title.
func (s *Group) SetTitle(val string) {
	s.Title = val
}

// SetLinks sets the value of Links.
func (s *Group) SetLinks(val []Link) {
	s.Links = val
}

// Ref: #/components/schemas/Link
type Link struct {
	Title      string `json:"title"`
	ModuleName string `json:"module_name"`
	Identifier string `json:"identifier"`
}

// GetTitle returns the value of Title.
func (s *Link) GetTitle() string {
	return s.Title
}

// GetModuleName returns the value of ModuleName.
func (s *Link) GetModuleName() string {
	return s.ModuleName
}

// GetIdentifier returns the value of Identifier.
func (s *Link) GetIdentifier() string {
	return s.Identifier
}

// SetTitle sets the value of Title.
func (s *Link) SetTitle(val string) {
	s.Title = val
}

// SetModuleName sets the value of ModuleName.
func (s *Link) SetModuleName(val string) {
	s.ModuleName = val
}

// SetIdentifier sets the value of Identifier.
func (s *Link) SetIdentifier(val string) {
	s.Identifier = val
}

type Navigators []NavigatorsItem

// NavigatorsItem represents sum type.
type NavigatorsItem struct {
	Type  NavigatorsItemType // switch on this field
	Link  Link
	Group Group
}

// NavigatorsItemType is oneOf type of NavigatorsItem.
type NavigatorsItemType string

// Possible values for NavigatorsItemType.
const (
	LinkNavigatorsItem  NavigatorsItemType = "Link"
	GroupNavigatorsItem NavigatorsItemType = "Group"
)

// IsLink reports whether NavigatorsItem is Link.
func (s NavigatorsItem) IsLink() bool { return s.Type == LinkNavigatorsItem }

// IsGroup reports whether NavigatorsItem is Group.
func (s NavigatorsItem) IsGroup() bool { return s.Type == GroupNavigatorsItem }

// SetLink sets NavigatorsItem to Link.
func (s *NavigatorsItem) SetLink(v Link) {
	s.Type = LinkNavigatorsItem
	s.Link = v
}

// GetLink returns Link and true boolean if NavigatorsItem is Link.
func (s NavigatorsItem) GetLink() (v Link, ok bool) {
	if !s.IsLink() {
		return v, false
	}
	return s.Link, true
}

// NewLinkNavigatorsItem returns new NavigatorsItem from Link.
func NewLinkNavigatorsItem(v Link) NavigatorsItem {
	var s NavigatorsItem
	s.SetLink(v)
	return s
}

// SetGroup sets NavigatorsItem to Group.
func (s *NavigatorsItem) SetGroup(v Group) {
	s.Type = GroupNavigatorsItem
	s.Group = v
}

// GetGroup returns Group and true boolean if NavigatorsItem is Group.
func (s NavigatorsItem) GetGroup() (v Group, ok bool) {
	if !s.IsGroup() {
		return v, false
	}
	return s.Group, true
}

// NewGroupNavigatorsItem returns new NavigatorsItem from Group.
func NewGroupNavigatorsItem(v Group) NavigatorsItem {
	var s NavigatorsItem
	s.SetGroup(v)
	return s
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}
